package main

import (
	"fmt"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
)

func main() {
	opts := &protogen.Options{}
	opts.Run(func(plugin *protogen.Plugin) error {
		for _, file := range plugin.Files {
			if !file.Generate {
				continue
			}

			fileName := file.GeneratedFilenamePrefix + "_bson.pb.go"
			g := plugin.NewGeneratedFile(fileName, file.GoImportPath)
			g.P("// Code generated by herro-labs/protoc-gen-go-bson. DO NOT EDIT.")
			g.P("package ", file.GoPackageName)
			g.P()

			for _, message := range file.Messages {
				var hasIdField bool
				for _, field := range message.Fields {
					if field.GoName == "Id" {
						if field.Desc.Kind() == protoreflect.StringKind {
							hasIdField = true
						}
						break
					}
				}

				if hasIdField {
					typeName := message.GoIdent.GoName + "BSON"
					g.P("type ", typeName, " struct {")
					g.P(message.GoIdent.GoName, "`bson:\",inline\"`")
					for _, field := range message.Fields {
						if field.GoName != "Id" {
							continue
						}
						tag := fmt.Sprintf("`protobuf:\"%s\" json:\"%s,omitempty\" bson:\"_id,omitempty\"`", field.Desc.Name(), field.Desc.Name())
						g.P(field.GoName, " string ", tag)
					}
				}
			}

			g.P("}")
		}
		return nil
	})
}
